name: Code Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libgtest-dev libtiff-dev libopencv-dev lcov
          sudo apt-get install -y nvidia-cuda-toolkit
          sudo apt-get install -y g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 100

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..

      - name: Build and run tests
        run: |
          cd build
          make coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage_report/
          if-no-files-found: warn

      - name: Extract coverage percentage
        run: |
          COVERAGE=$(lcov --summary build/coverage.info --ignore-errors empty,version | grep -Po 'lines.*: \K[0-9.]+%')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE"

      - name: Validate Gist auth
        if: github.event_name == 'push'
        run: |
          TOKEN=$(echo -n "${{ secrets.GIST_SECRET }}" | tr -d '\r\n')
          if [ -z "$TOKEN" ]; then
            echo "GIST_SECRET пуст. Сохраните валидный PAT в секреты репозитория."
            exit 1
          fi

          # 1) Проверка валидности PAT
          USER_RESP=$(curl -s -D - -o /dev/null -H "Authorization: token $TOKEN" https://api.github.com/user)
          USER_CODE=$(echo "$USER_RESP" | head -n1 | awk '{print $2}')
          if [ "$USER_CODE" != "200" ]; then
            echo "PAT недействителен (HTTP $USER_CODE). Пересоздайте токен со scope gist или Fine-grained с Gists: Read and write."
            exit 1
          fi
          USER_LOGIN=$(curl -s -H "Authorization: token $TOKEN" https://api.github.com/user | grep -Po '"login":\s*"\K[^"]+')
          echo "Token user: $USER_LOGIN"

          # 2) Доступ к Gist и совпадение владельца
          GIST_JSON=$(curl -s -H "Authorization: token $TOKEN" https://api.github.com/gists/${{ secrets.GIST_ID }})
          if echo "$GIST_JSON" | grep -q '"message":\s*"Not Found"'; then
            echo "Gist не найден или недоступен. Возможные причины: неверный GIST_ID, секретный Gist другого владельца."
            exit 1
          fi
          if echo "$GIST_JSON" | grep -q '"message":\s*"Bad credentials"'; then
            echo "Bad credentials при доступе к Gist. Проверьте токен и его права."
            exit 1
          fi
          OWNER_LOGIN=$(echo "$GIST_JSON" | grep -Po '"owner":\s*{[^}]*"login":\s*"\K[^"]+')
          if [ -z "$OWNER_LOGIN" ]; then
            echo "Не удалось определить владельца Gist. Проверьте GIST_ID."
            exit 1
          fi
          echo "Gist owner: $OWNER_LOGIN"
          if [ "$OWNER_LOGIN" != "$USER_LOGIN" ]; then
            echo "Токен принадлежит '$USER_LOGIN', а Gist — '$OWNER_LOGIN'. Для обновления нужен токен владельца Gist."
            exit 1
          fi

      - name: Create coverage badge
        if: github.event_name == 'push'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ env.COVERAGE }}
          color: ${{ env.COVERAGE < '50' && 'red' || env.COVERAGE < '90' && 'yellow' || 'green' }}
          namedLogo: jest

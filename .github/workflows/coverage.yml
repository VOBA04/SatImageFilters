name: Code Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  coverage:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libgtest-dev libtiff-dev libopencv-dev lcov
          sudo apt-get install -y nvidia-cuda-toolkit

      - name: Check tool versions
        run: |
          gcc --version
          gcov --version
          lcov --version
          nvcc --version
          nvidia-smi || echo "No GPU available"

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..

      - name: Build and run tests
        run: |
          cd build
          make coverage
        continue-on-error: true

      - name: Run tests with output
        run: |
          cd build
          ./unit_tests --gtest_output=xml:tests.xml
          cat tests.xml
        continue-on-error: true

      - name: Check for .gcda files
        run: |
          find build -name "*.gcda" || echo "No .gcda files found"

      - name: Check for coverage.info
        run: |
          if [ -f build/coverage.info ]; then
            echo "coverage.info found"
            cat build/coverage.info
          else
            echo "coverage.info not found"
          fi

      - name: Extract coverage percentage
        run: |
          if [ -f build/coverage.info ]; then
            COVERAGE=$(lcov --summary build/coverage.info --ignore-errors empty | grep -Po 'lines.*: \K[0-9.]+%' || echo "0%")
            echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
            echo "Coverage: $COVERAGE"
          else
            echo "COVERAGE=0%" >> $GITHUB_ENV
            echo "Coverage: 0% (coverage.info not found)"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage_report/
          if-no-files-found: warn
        if: always()

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: coverage.json
          label: Coverage
          message: ${{ env.COVERAGE }}
          color: ${{ env.COVERAGE == '0%' && 'red' || env.COVERAGE < '50' && 'red' || env.COVERAGE < '90' && 'yellow' || 'green' }}
          namedLogo: jest
